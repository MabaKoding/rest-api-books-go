swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /books/:
    get:
      tags:
      - books
      description: |-
        API to get all of list book
        <br>
      operationId: BookController.Get All
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.BookData'
        "403":
          description: ""
    post:
      tags:
      - books
      description: |-
        create Books
        <br>
      operationId: BookController.Post
      parameters:
      - in: body
        name: body
        description: body for Books content
        required: true
        schema:
          $ref: '#/definitions/models.BookData'
      responses:
        "201":
          description: '{int} models.BookData'
        "403":
          description: body is empty
  /books/{bookIsbn}:
    get:
      tags:
      - books
      description: |-
        API to get one data book
        <br>
      operationId: BookController.Get One
      parameters:
      - in: path
        name: bookIsbn
        description: the book isbn
        required: true
        type: string
      responses:
        "200":
          description: '{string} models.BookData'
        "403":
          description: body is empty
  /books/{bookIsbn}/remove:
    delete:
      tags:
      - books
      description: |-
        Remove books from the list
        <br>
      operationId: BookController.Remove Book
      parameters:
      - in: path
        name: bookIsbn
        description: the book isbn
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.OutputDeleteResponse'
        "404":
          description: :id is not found
  /books/{bookIsbn}/update:
    put:
      tags:
      - books
      description: |-
        Update user data
        <br>
      operationId: BookController.Update user data
      parameters:
      - in: path
        name: bookIsbn
        description: the book isbn
        required: true
        type: string
      - in: body
        name: body
        description: body for Books content
        required: true
        schema:
          $ref: '#/definitions/controllers.BookRequestUpdate'
      responses:
        "200":
          description: '{string} models.BookData'
        "403":
          description: body is empty
definitions:
  controllers.BookRequestUpdate:
    title: BookRequestUpdate
    type: object
    properties:
      books_author:
        type: string
      books_description:
        type: string
      books_published:
        type: string
      books_publisher:
        type: string
      books_subtitle:
        type: string
      books_title:
        type: string
  controllers.OutputDeleteResponse:
    title: OutputDeleteResponse
    type: object
  models.BookData:
    title: BookData
    type: object
    properties:
      books_author:
        type: string
      books_description:
        type: string
      books_isbn:
        type: string
      books_published:
        type: string
      books_publisher:
        type: string
      books_subtitle:
        type: string
      books_title:
        type: string
  models.Books:
    title: Books
    type: object
    properties:
      BooksAuthor:
        type: string
      BooksDescription:
        type: string
      BooksPublished:
        type: string
        format: datetime
      BooksPublisher:
        type: string
      BooksSubtitle:
        type: string
      BooksTitle:
        type: string
      Id:
        type: string
